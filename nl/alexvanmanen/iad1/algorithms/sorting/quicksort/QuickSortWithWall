package IAD1.nl.alexvanmanen.iad1.algorithms.sorting.quicksort;

import java.util.Arrays;

public class QuickSortWithWall {

	public static void main(String[] args) {
		int[] array = { 2, 5, 4, 6, 1, 3 };
		// int[] array = {3, 2, 4, 1};
		System.out.println(Arrays.toString(array));
		quickSort(array);
		System.out.println(Arrays.toString(array));
	}

	public static void quickSort(int[] array) {
		quickSort(array, 0, array.length - 1);
	}

	private static void quickSort(int[] array, int positionLeft, int positionRight) {
		
		if (positionLeft >= positionRight) {
			return;
		}
		int pivotPosition = positionRight;
		int pivotValue = array[positionRight];
		int wall = positionLeft;

		for (int currentPosition = positionLeft; currentPosition < positionRight; currentPosition++) {
			if (pivotValue > array[currentPosition]) {
				swap(array, currentPosition, wall);
				wall++;
			}
		}
		if (pivotValue < array[wall]) {
			swap(array, pivotPosition, wall);
		}
		quickSort(array, positionLeft, wall - 1);
		quickSort(array, wall, positionRight);

	}

	public static void swap(int[] array, int positionA, int positionB) {
		int temp = array[positionA];
		array[positionA] = array[positionB];
		array[positionB] = temp;
	}
}
